name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: cache dependencies
        uses: actions/cache@v4
        with:
          # path will contain all the files/folders that needs to be cached and restore
          path: ~/.npm
          # hashFiles will create new cache when depen. changes
          key: ${{ runner.os }}-npm-cache${{ hashFiles("**/package-lock.json") }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.test}}
      output2: ${{ steps.step2.outputs.test}}
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: cache dependencies
        uses: actions/cache@v4
        with:
          # path will contain all the files/folders that needs to be cached and restore
          path: ~/.npm
          # hashFiles will create new cache when depen. changes
          key: ${{ runner.os }}-npm-cache${{ hashFiles("**/package-lock.json") }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: jo1
        id: step1
        run: echo "test=hello" >> $GITHUB_OUTPUT
      - name: jo2
        id: step2
        run: echo "test=world" >> $GITHUB_OUTPUT
      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
          # we can give multiple paths as single artifact using |
          # path: |
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: download the artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files # will download dist-files artifact
      - name: output contents of artifact
        run: ls
      - name: use jo in other job
        run: echo ${{ needs.build.outputs.output1 }} ${{ needs.build.outputs.output2 }}
      - name: Deploy
        run: echo "Deploying..."
